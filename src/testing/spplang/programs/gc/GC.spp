from "src/testing/spplang/programs/gc/LinkedNode.spp" import LinkedNode as LinkedNode;

def int64 printf( int8 * , ... ) ;
def void free(int8*);
def int8* malloc(int64);
def int8* memcpy(int8*,int8*,int64);

def int8* memcpyn(int8* dst, int8* src, int64 size, int64 rep) does
    int64 i = 0;
    while i < rep do
        &memcpy((dst as int64 + size * i) as int8*, src, size);
        &i = i + 1;
    ;
    return dst;
;

class GC with
    def LinkedNode* node;
    def LinkedNode* roots;

    def GC* start(GC* this) does
        this&.node  = 0 as LinkedNode*;
        this&.roots = 0 as LinkedNode*;
        return this;
    ;

    def int8* push(GC* this, int8* elem, int64 size) does 
        LinkedNode* node = new LinkedNode(elem, size);
        LinkedNode* root = new LinkedNode(elem, size);

        if this.node as int64 == 0 do 
            this&.node = node;
            this&.roots = root;
            return elem;
        ;

        this.node.append(node);
        this.roots.append(root);
        return elem;
    ;

    def int8* pushNoRoot(GC* this, int8* elem, int64 size) does 
        LinkedNode* node = new LinkedNode(elem, size);

        if this.node as int64 == 0 do 
            this&.node = node;
            return elem;
        ;

        this.node.append(node);
        return elem;
    ;

    def GC* pop(GC* this) does
        int64 size = this.roots.size();

        if size == 1 do 
            &free(this.roots as int8*);
            this&.roots = 0 as LinkedNode*;
            return this;
        ;

        if size >= 2 do
            LinkedNode* curr = this.roots;

            while curr.next.next as int64 != 0 do
                &curr = curr.next;
            ;

            &free(curr.next as int8*);
            curr&.next = 0 as LinkedNode*;
            return this;
        ;

        return this;
    ;

    def GC* mark_root(GC* this, int8* root) does
        LinkedNode* root = this.node.fromElementPointer(root);

        if root as int64 != 0 do 
            root&.marked = 1;

            int64 start = root.element as int64;
            int64 stop  = start + root.bsize;
            while start < stop do
                LinkedNode* node = this.node.fromElementPointer((start as int8**)[0]);
                if node as int64 != 0 do
                    if node.marked == 0 do
                        this.mark_root((start as int8**)[0]);
                    ;
                ;
                &start = start + 8;
            ;
        ;

        return this;
    ;

    def GC* mark(GC* this) does
        LinkedNode* current = this.roots;
        while current as int64 != 0 do
            this.mark_root(current.element);
            &current = current.next;
        ;
        &printf("MARKED ============================\n");
        this.node.printAll();
        return this;
    ;

    def GC* unmark(GC* this) does
        LinkedNode* current = this.node;
        while current as int64 != 0 do
            current&.marked = 0;
            &current = current.next;
        ;

        return this;
    ;

    def GC* sweep(GC* this) does

        if this.node as int64 == 0 do return this;;

        LinkedNode* current = this.node;
        LinkedNode* markedNodes = 0 as LinkedNode*;
        LinkedNode* unmarkedNodes = 0 as LinkedNode*;
        while current.isLast() == 0 do
            LinkedNode* newNode = new LinkedNode(current.element, current.bsize);
            if current.marked == 1 *   markedNodes as int64 != 0 do    markedNodes.append(newNode);;
            if current.marked == 1 *   markedNodes as int64 == 0 do &  markedNodes = newNode;;
            if current.marked == 0 * unmarkedNodes as int64 != 0 do  unmarkedNodes.append(newNode);;
            if current.marked == 0 * unmarkedNodes as int64 == 0 do &unmarkedNodes = newNode;;
            LinkedNode* tmp = current;
            &current = current.next;
            &free(tmp as int8*);
        ;
        LinkedNode* newNode = new LinkedNode(current.element, current.bsize);
        if current.marked == 1 *   markedNodes as int64 != 0 do    markedNodes.append(newNode);;
        if current.marked == 1 *   markedNodes as int64 == 0 do &  markedNodes = newNode;;
        if current.marked == 0 * unmarkedNodes as int64 != 0 do  unmarkedNodes.append(newNode);;
        if current.marked == 0 * unmarkedNodes as int64 == 0 do &unmarkedNodes = newNode;;
        &free(current as int8*);

        if unmarkedNodes as int64 != 0 do unmarkedNodes.end();;
        this&.node = markedNodes;
        return this;
    ;

    def void end(GC* this) does
        if this.node as int64 != 0 do this.node.end();;

        if this.roots as int64 != 0 do
            int64 size = this.roots.size();
            while size != 0 do
                this.pop();
                &size = size-1;
            ;
        ;

        &free(this as int8*);
        return;
    ;

;

def GC * gc = 0 as GC * ;
